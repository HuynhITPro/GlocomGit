@if (ListItems != null)
{
    var queryitem = ListItems.Where(p => p.NodeParent == Nodeparent);
    @foreach (var item in queryitem)
    {


        if (queryitem.Count() == 0)
        {
            <DxMenuItem Text=@item.TextItem IconCssClass=@item.IconCssClass Name=@item.NameItem Click="itemclick" Target="@item.ComponentName">
            </DxMenuItem>
        }
        else
        {
            <DxMenuItem Text=@item.TextItem IconCssClass=@item.IconCssClass Name=@item.NameItem Click="itemclick" Target="@item.ComponentName">
                <Items>
                    <Page_PhanQuyenMenucClick ListItems="ListItems" Nodeparent="@item.NameItem"></Page_PhanQuyenMenucClick>
                </Items>
            </DxMenuItem>
        }
    }
}
@code {

    [Parameter]
    public List<MenuItem> ListItems { get; set; }
    [Parameter]
    public string Nodeparent { get; set; }

    [CascadingParameter(Name = "additemclick")]
    public EventCallback<MenuItem> cascadedValue { get; set; }

    async void itemclick(MenuItemClickEventArgs args)
    {
        var it = args.ItemInfo;

        MenuItem menuItem = ListItems.Where(p => p.NameItem.Equals(it.Name)).FirstOrDefault();
        if (string.IsNullOrEmpty(menuItem.PhanQuyen))
            return;
        await cascadedValue.InvokeAsync(menuItem);

    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

}
