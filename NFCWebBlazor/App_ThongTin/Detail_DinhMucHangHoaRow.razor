@using BlazorBootstrap
@using DevExpress.Blazor;
@using NFCWebBlazor.App_ClassDefine;
@using System.Data
@using System.Collections.ObjectModel
@using static NFCWebBlazor.App_ThongTin.Page_DinhMucHangHoaMaster

@inject Model.ThemeColor themcolor;

<NFCWebBlazor.App_Admin.DialogMsg @ref="@dialogMsg"></NFCWebBlazor.App_Admin.DialogMsg>
<NFCWebBlazor.App_ClassDefine.DialogWindow @ref=@dxPopup>
    <BodyContentTemplate>
        @renderFragment
    </BodyContentTemplate>
</NFCWebBlazor.App_ClassDefine.DialogWindow>
<DxFlyout @ref=dxFlyoutchucnang
          PositionTarget="@idflychucnang"
          @bind-IsOpen=IsOpenfly
          RestrictionTarget="#Navigation-Flyout-Customization"
          AnimationType=FlyoutAnimationType.Fade
          PreventCloseOnPositionTargetClick="true"
          Width="320px"
          Position=@(FlyoutPosition.BottomStart | FlyoutPosition.TopStart)>
    <BodyTextTemplate>

        <div class="container">
            <div class="row gap-1">
                <DxButton Visible=@Visilethemchitiet IconCssClass="bi bi-arrow-repeat" RenderStyle="ButtonRenderStyle.Primary" Text="ĐỒNG BỘ ĐÓNG VỈ" RenderStyleMode="ButtonRenderStyleMode.Outline" Click="@DongBoDongViAsync">
                </DxButton>
                <DxButton Visible=@CheckQuyen Text="THÊM MÃ HÀNG VÀO VẾ/CỤM" IconCssClass="bi bi-pencil" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" Click="@AddItem2">
                </DxButton>
                <DxButton Visible=@CheckQuyen Text="IMPORT MÃ HÀNG VÀO VẾ/CỤM" IconCssClass="bi bi-file-earmark-spreadsheet" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" Click="@ImportItem">
                </DxButton>
               
                    <DxButton Visible=@Visilechinhsua Text="CHỈNH SỬA" IconCssClass="bi bi-pencil" RenderStyle="ButtonRenderStyle.Warning" RenderStyleMode="ButtonRenderStyleMode.Outline" Click="@EditItemAsync">
                    </DxButton>
                    <DxButton Visible=@Visiledelete Text="XÓA" IconCssClass="bi bi-trash3" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Outline" Click="@deleteAsync">
                    </DxButton>
            
            </div>


        </div>
    </BodyTextTemplate>

</DxFlyout>
<div>
    <DxLoadingPanel @bind-Visible="@PanelVisible"
                    IsContentBlocked="true"
                    ApplyBackgroundShading="true"
                    IndicatorAreaVisible="false"
                    Text="Đang xử lý...">
        <div>
            <h4>@sanPhamShowcrr.TenSP</h4>
        </div>
        <DxGrid @ref="Grid" Data="@lstdata"
                TextWrapEnabled="true"
                AutoExpandAllGroupRows="true"
              AutoCollapseDetailRow="false"
                FocusedRowEnabled="false"
                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                VirtualScrollingEnabled=true
                >
            <ToolbarTemplate>
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                    <DxToolbarItem Text="Tải lại" IconCssClass="bi bi-arrow-clockwise" RenderStyle="ButtonRenderStyle.Primary" Click="@searchAsync">
                    </DxToolbarItem>
                    <DxToolbarItem Text="Xuất Excel" IconCssClass="bi bi-filetype-xlsx" RenderStyle="ButtonRenderStyle.Secondary" Click="@(()=> Grid.ExportToXlsxAsync("ExportHangHoa"))">
                    </DxToolbarItem>
                    <DxToolbarItem Text="Chọn cột" Click="@(()=>Grid.ShowColumnChooser())" IconCssClass="bi bi-layout-text-window-reverse" />
                    <DxToolbarItem Text="Hiển thị đầy đủ" IconCssClass="bi bi-arrows-expand" RenderStyle="ButtonRenderStyle.Danger" Click="@expandall" />
                    
                    </DxToolbar>
            </ToolbarTemplate>
            <Columns>
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.Serial)" Caption=" " Width="120">
                    <CellDisplayTemplate>
                        @{
                            HangHoaItem sanPhamShow;
                            if (context.DataItem != null)
                                sanPhamShow = (HangHoaItem)context.DataItem;
                            else
                                sanPhamShow = new HangHoaItem();
                        }
                        <span>
                            <a href="#" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover"
                               id="@idelement(sanPhamShow.Serial)" @onclick="@(()=>ShowFlyout(sanPhamShow))"><i class="bi bi-list-stars me-1"></i>CHỨC NĂNG</a>
                        </span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="@nameof(HangHoaItem.MaHang)" Caption="Mã hàng" Width="120" />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.TenHang)" Caption="Tên hàng" MinWidth="240" />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.SLQuyDoi)" Caption="SL/bộ" Width="100" DisplayFormat="#,0.####" />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.DinhMucHaoHut)" Caption="Định mức" Width="130" DisplayFormat="#,0.####"></DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.ArticleNumber)" GroupIndex=0 Caption="Art Number">
                    <GroupRowTemplate>
                        @{
                            int rowindex = context.VisibleIndex;
                            string valuegroup = (string)context.GroupValue;
                            HangHoaItem hangHoaItem = lstdata.FirstOrDefault(p => p.ArticleNumber.Equals(valuegroup));
                        }
                        @if (hangHoaItem != null)
                        {
                            <div class="row d-flex ms-2">
                                <div class="col-auto text-danger align-content-center" style="min-width:150px;">
                                    <span>@(string.IsNullOrEmpty(hangHoaItem.ArticleNumber)?"Dùng chung trong sản phẩm":hangHoaItem.ArticleNumber)</span>
                                </div>
                                @if (!string.IsNullOrEmpty(hangHoaItem.ArticleNumber))
                                {
                                    <div class="col-auto card p-1" style="background-color:@StaticClass.UIntToHtmlColor(hangHoaItem.Color);min-width:150px;">
                                        <span>@hangHoaItem.TenMau</span>
                                    </div>
                                }
                                <div class="col-auto align-content-center">
                                                                                                                                                                                                                                                                 `
                                        <a href="#" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover"
                                           @onclick="@(()=>AddItem(hangHoaItem))"><i class="bi bi-plus-circle me-1"></i>Thêm mã hàng vào sản phẩm</a>
                                  
                                </div>
                            </div>
                        }
                    </GroupRowTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.KhuVuc)" GroupIndex=1 Caption="Nhóm" />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.ChatLuong)" Caption="Chất lượng" Width="100" Visible=false />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.GhiChu)" Caption="Ghi chú" Visible=false />
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.UserInsert)" Caption="Người tạo" Width="120"></DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(HangHoaItem.NgayInsert)" Caption="Ngày tạo" Width="140" DisplayFormat="dd-MM-yy HH:mm">
                </DxGridDataColumn>
            </Columns>
            <DetailRowTemplate>
                <DxTabs>
                   
                        @{
                            HangHoaItem sanPhamShow = (HangHoaItem)context.DataItem;
                        }
                        <Detail_DinhMucHangHoaRowItem hanghoaitemcrrmaster="@sanPhamShow"></Detail_DinhMucHangHoaRowItem>
                   
                </DxTabs>

            </DetailRowTemplate>
        </DxGrid>
        
    </DxLoadingPanel>
</div>


@code {
    [Parameter]
    public SanPhamShow sanPhamShowcrr { get; set; }
    [Parameter]
    public List<HangHoaItem> lstdata { get; set; }


    DialogWindow? dxPopup { get; set; }
    RenderFragment? renderFragment { get; set; }
    DialogMsg? dialogMsg { get; set; }
    public string? random { get; set; }
    bool Visilethemchitiet = true, Visilechinhsua = true, Visiledelete = true, Visilethemfile = true;

    IGrid? Grid { get; set; }
    DxFlyout? dxFlyoutchucnang { get; set; }
    public string? idflychucnang { get; set; }
    bool IsOpenfly { get; set; } = false;
    App_ClassDefine.ClassProcess prs = new ClassProcess();
    bool PanelVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await loadAsync();
        // return base.OnInitializedAsync();
    }
    public string idelement(int? serial)
    {
        if (serial == null)
            string.Format("flychucnang_{0}_{1}", random, serial);
        if (random == null)
        {
            random = prs.RandomString(9);
        }
        return string.Format("flychucnang_{0}_{1}", random, serial);
    }
    private async Task loadAsync()
    {
        CheckQuyen = await phanQuyenAccess.CreateDinhMucVatTu(Model.ModelAdmin.users);
        if (sanPhamShowcrr != null)
        {
            if (lstdata == null)
            {
                searchAsync();
            }
            else
            {
                //lstdata = sanPhamShowcrr.lsthanghoaitem;
                //Grid.Reload();

                StateHasChanged();
            }
        }
    }
    bool expand = true;
    private void expandall()
    {
        Grid.BeginUpdate();
        Grid.AutoExpandAllGroupRows = expand;
        Grid.EndUpdate();
        expand = !expand;
    }



}
