@using System.Collections.ObjectModel
@using static NFCWebBlazor.App_NguyenVatLieu.App_KeHoachDeNghi.Page_KeHoachMuaHangMaster
<style>
    .griddetail {
        max-height: @heightgrid;
    }



</style>

<NFCWebBlazor.App_Admin.DialogMsg @ref="@dialogMsg"></NFCWebBlazor.App_Admin.DialogMsg>
<NFCWebBlazor.App_ClassDefine.DialogWindow @ref=@dxPopup>
    <BodyContentTemplate>
        @renderFragment
    </BodyContentTemplate>
</NFCWebBlazor.App_ClassDefine.DialogWindow>
<DxFlyout @ref=dxFlyoutchucnang
          PositionTarget="@idflychucnang"
          @bind-IsOpen=IsOpenfly
          RestrictionTarget="#Navigation-Flyout-Customization"
          AnimationType=FlyoutAnimationType.Fade
          PreventCloseOnPositionTargetClick="true"
          Width="500px"
          Position=@(FlyoutPosition.BottomStart | FlyoutPosition.TopStart)>
   
</DxFlyout>

<DxLoadingPanel @bind-Visible="@PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Đang xử lý...">

    <DxGrid @ref="Grid" Data="@lstdata"
            AutoExpandAllGroupRows="true"
            TextWrapEnabled="true"
          
            FocusedRowEnabled="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            id="@idgrid"
            CustomizeElement="OnCustomizeElement"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            VirtualScrollingEnabled=true
            ShowAllRows=false
            ShowFilterRow=false>
        <ToolbarTemplate>
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                <DxToolbarItem Text="Tải lại" IconCssClass="bi bi-arrow-clockwise" RenderStyle="ButtonRenderStyle.Primary" Click="@searchAsync">
                </DxToolbarItem>
                <DxToolbarItem Text="Xuất excel" Visible="!Ismobile" IconCssClass="bi bi-filetype-xlsx" RenderStyle="ButtonRenderStyle.Secondary" Click="@(()=>Grid.ExportToXlsxAsync("ExporDeNghi"))">
                </DxToolbarItem>
                <DxToolbarItem Text="Chọn cột" Visible="!Ismobile" BeginGroup="true" Click="@(()=>Grid.ShowColumnChooser())" IconCssClass="bi bi-layout-text-window-reverse" />
                <DxToolbarItem Text="Thêm vào đề nghị mua hàng" IconCssClass="bi bi-floppy" RenderStyle="ButtonRenderStyle.Primary" Click="@saveAsync">
                </DxToolbarItem>
                </DxToolbar>
        </ToolbarTemplate>
        <Columns>
          
            <DxGridDataColumn Caption=" " FieldName="chk" Width="60">
                <CellDisplayTemplate>
                    @{
                        NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItemShow = (NvlKeHoachMuaHangItemShow)context.DataItem;
                    }
                    <DxCheckBox @bind-Checked=nvlKeHoachMuaHangItemShow.chk></DxCheckBox>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="SerialDN" DisplayFormat="#" Caption="SerialDN" Width="100">

            </DxGridDataColumn>
            <DxGridDataColumn FieldName="MaHang" Caption="Mã hàng" Width="120" Visible="!Ismobile" />
            <DxGridDataColumn FieldName="TenHang" Caption="Tên hàng" Width="250"></DxGridDataColumn>
            <DxGridDataColumn FieldName="SoLuong" DisplayFormat="#,0.####" Caption="Số lượng" Width="100" />
            <DxGridDataColumn FieldName="SLTheoDoi" DisplayFormat="#,0.####" Caption="SL đặt" Width="120">
                <CellDisplayTemplate>
                    @{
                        NvlKeHoachMuaHangItemShow itemShow = (NvlKeHoachMuaHangItemShow)context.DataItem;
                    }
                    <DxSpinEdit ShowSpinButtons="false" MinValue="0" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" AllowMouseWheel="false" @bind-Value="@itemShow.SLTheoDoi" DisplayFormat="0.###">
                    </DxSpinEdit>
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <DxGridDataColumn FieldName="DVT" Caption="ĐVT" Width="80" />

           
            <DxGridDataColumn FieldName="SLTon" DisplayFormat="#,#" Caption="Tồn kho" Width="120" Visible="!Ismobile" />
          
            <DxGridDataColumn FieldName="TyLe" Width="140" Caption="Hoàn thành">
                <CellDisplayTemplate>
                    <NFCWebBlazor.App_ClassDefine.ProgressBarDf value=@(((NvlKeHoachMuaHangItemShow)context.DataItem).TyLe)></NFCWebBlazor.App_ClassDefine.ProgressBarDf>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="SLHuy" DisplayFormat="#,0.####" Caption="SL Hủy" Width="80" Visible=!checkAddItem />

            <DxGridDataColumn FieldName="GhiChu" Caption="Ghi chú" Width="120" />
            <DxGridDataColumn FieldName="UserInsert" Width="120" Caption="UserInsert" Visible="!Ismobile" />
            <DxGridDataColumn FieldName="NgayInsert" Width="120" Caption="NgayInsert" DisplayFormat="dd-MM-yy HH:mm" Visible="!Ismobile" />

        </Columns>
        <TotalSummary>

            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                               FieldName="ThanhTien"
                               Name="ThanhTienShow"
                               DisplayText="Tổng: {0}"
                               FooterColumnName="@showfooterthanhtien" />
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                               FieldName="SoLuong"
                               Name="SoLuong"
                               DisplayText="{0}"
                               FooterColumnName="SoLuong" />
        </TotalSummary>
    </DxGrid>

</DxLoadingPanel>

@code {
    [Inject] BrowserService browserService { get; set; }

    [Parameter]
    public KeHoachMuaHang_Show keHoachMuaHangcrr { get; set; }
    [Parameter]
    public EventCallback GotoMasterGrid { get; set; }
    [Parameter]
    public bool Ismobile { get; set; }
    [Parameter]
    public string SerialDH { get; set; }
    ObservableCollection<NvlKeHoachMuaHangItemShow> lstdata { get; set; }
    List<NvlNhapXuatItemTemTK> lstdataitem { get; set; } = new List<NvlNhapXuatItemTemTK>();
    int count = 0;
    NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItemShowcrr { get; set; }
    bool checkAddItem = true;
    bool PanelVisible { get; set; }
    bool VisibleKeHoachMuaHang = false;
    IGrid? Grid { get; set; }
    IGrid? dxGridTK { get; set; }
    DxFlyout dxFlyoutchucnang { get; set; }
    public string idflychucnang { get; set; }
    bool IsOpenfly = false;

    string idgrid = "griddetaikehoach";
    bool PopupVisible { get; set; } = false;
    DialogWindow? dxPopup { get; set; }
    RenderFragment? renderFragment { get; set; }
    DialogMsg? dialogMsg { get; set; }
    public string? random { get; set; }
    string heightgrid = "500px";
    string headerform = "";
    string showfooterthanhtien = "ThanhTien";

    private string shownguoikiem(string textkiem)
    {
        if (textkiem == "")
        {
            return "";
        }
        return "Kiểm bởi: " + textkiem;
    }
    private string shownguoiduyet(string textduyet)
    {
        if (textduyet == "")
        {
            return "Chưa duyệt";
        }
        return "Duyệt bởi: " + textduyet;
    }
    private string pathimgduyet(string textduyet)
    {
        if (textduyet == "")
        {
            return IconImg.NotCheck;
        }
        return IconImg.CheckMark;
    }
    protected override async Task OnInitializedAsync()
    {
        await loadAsync();

    }
    int countrender = 0;
    private string showArt(string Art)
    {
        countrender++;
        Console.WriteLine("Countrender:" + countrender);
        return Art;
    }
    private string showdouble(double? d)
    {
        if (d == null)
        {
            return "";
        }
        return d.Value.ToString("#,#.#");
    }
    private string showdecimal(double? d)
    {
        if (d == null)
        {
            return "";
        }
        return d.Value.ToString("#,#.#");
    }
    private async Task loadAsync()
    {

        var dimension = await browserService.GetDimensions();
        // var heighrow = await browserService.GetHeighWithID("divcontainer");
        int height = dimension.Height - 90;
        heightgrid = string.Format("{0}px", height);
        int width = dimension.Width;
        if (width < 768)
        {
            Ismobile = true;
            idgrid = "customGridnotheader";
            showfooterthanhtien = "UserInsert";//Hiển thị tổng ở cột này
        }
        else
            Ismobile = false;
        if (keHoachMuaHangcrr.LoaiKeHoach.Contains("KeHoach"))
        {
            Grid.BeginUpdate();
            Grid.AutoExpandAllGroupRows = false;
            Grid.EndUpdate();
        }
        else
        {
            Grid.BeginUpdate();
            Grid.AutoExpandAllGroupRows = true;
            Grid.EndUpdate();
        }
    }
    bool expand = true;
    private void expandall()
    {
        Grid.BeginUpdate();
        Grid.AutoExpandAllGroupRows = expand;
        Grid.EndUpdate();
        expand = !expand;
    }
    void OnCustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
        {
            NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItemShow = (NvlKeHoachMuaHangItemShow)e.Grid.GetDataItem(e.VisibleIndex);
            // Console.WriteLine(nvlKeHoachMuaHangItemShow.HuyDatHang);
            if (nvlKeHoachMuaHangItemShow.HuyDatHang == "Hủy")
                e.CssClass = "highlighted-item-linethrough";

        }

    }
    private string showtexthuy(NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItem)
    {
        if (keHoachMuaHangcrr.LoaiKeHoach.Contains("MuaHang"))
        {
            if (string.IsNullOrEmpty(nvlKeHoachMuaHangItem.HuyDatHang))
            {
                return "Hủy đặt hàng";
            }

            return "Tiếp tục đặt hàng";
        }
        else
        {
            if (string.IsNullOrEmpty(nvlKeHoachMuaHangItem.HuyDatHang))
            {
                return "Hủy cấp hàng";
            }

            return "Tiếp tục cấp hàng";
        }

    }

    public string idelement(int? serial)
    {
        if (serial == null)
            string.Format("flychucnang_{0}_{1}", random, serial);
        if (random == null)
        {
            random = StaticClass.Randomstring(9);
        }
        return string.Format("flychucnang_{0}_{1}", random, serial);
    }
    private void DonGiaChanged(double? d, NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItemShow)
    {
        nvlKeHoachMuaHangItemShow.DonGia = d;
        nvlKeHoachMuaHangItemShow.ThanhTien = nvlKeHoachMuaHangItemShow.SLDatHang * d;

    }
    private void checkedchanged(bool e, NvlKeHoachMuaHangItemShow nvlKeHoachMuaHangItemShow)
    {
        nvlKeHoachMuaHangItemShow.chk = e;

        if (e)
        {
            nvlKeHoachMuaHangItemShow.SLDatHang = nvlKeHoachMuaHangItemShow.SLTheoDoi;
            nvlKeHoachMuaHangItemShow.ThanhTien = nvlKeHoachMuaHangItemShow.DonGia * nvlKeHoachMuaHangItemShow.SLDatHang;
        }

    }


}
