@page "/within"
@using System.Collections.ObjectModel;

@inject IJSRuntime JS

<h1>Drag & Drop in Grid</h1>
<br />

<div style="width: 500px">
    <DxGrid @ref="Grid"
            Data="Items" @key="@myKey"
            AllowSort="false"
            CustomizeElement="Grid_CustomizeElement">
        <Columns>
            <DxGridDataColumn FieldName="Name" />
        </Columns>
    </DxGrid>
</div>

@code {
    bool ReInitializeDragging { get; set; }

    IGrid Grid { get; set; }
    Guid myKey { get; set; } = Guid.NewGuid();
    ObservableCollection<GridDataItem> Items { get; set; }

    DotNetObjectReference<Within> DotNetHelper { get; set; }
    IJSObjectReference JsModule { get; set; }

   

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Items = new ObservableCollection<GridDataItem>(
           new List<GridDataItem>() {
                new GridDataItem("Beverages"),
                new GridDataItem("Seafood"),
                new GridDataItem("Grains"),
                new GridDataItem("Confections"),
                new GridDataItem("Dairy Products"),
                new GridDataItem("Cereals"),
                new GridDataItem("Meat"),
                new GridDataItem("Poultry"),
                new GridDataItem("Produce"),
                new GridDataItem("Frozen Entrees")
                   }
       );
            JsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./App_NguyenVatLieu/Within.razor.js");

            DotNetHelper = DotNetObjectReference.Create(this);
            await JsModule.InvokeVoidAsync("setDotNetHelper", DotNetHelper);
            await JsModule.InvokeVoidAsync("initialize");
        }
        else
        {
            if (ReInitializeDragging)
            {
                ReInitializeDragging = false;
                await JsModule.InvokeVoidAsync("initialize");
            }
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
            e.Attributes["data-visible-index"] = e.VisibleIndex;
    }

    [JSInvokable]
    public void ReorderGridRows(int draggableRowVisibleIndex, int prevRowVisibleIndex, int nextRowVisibleIndex)
    {
        var hasPrevRow = prevRowVisibleIndex > -1;
        var hasNextRow = nextRowVisibleIndex > -1;

        var sourceItem = (GridDataItem)Grid.GetDataItem(draggableRowVisibleIndex);
        var hasSamePosition = hasPrevRow && draggableRowVisibleIndex == prevRowVisibleIndex + 1 || hasNextRow && draggableRowVisibleIndex == nextRowVisibleIndex - 1;
        if (hasSamePosition)
            return;

        var moveTop = false;
        if (!hasPrevRow || prevRowVisibleIndex <= draggableRowVisibleIndex)
            moveTop = true;
        var newVisibleIndex = moveTop ? nextRowVisibleIndex : prevRowVisibleIndex;

        var sourceItemIndex = Items.IndexOf(sourceItem);
        var newItemIndex = Items.IndexOf((GridDataItem)Grid.GetDataItem(newVisibleIndex));
        Items.Move(sourceItemIndex, newItemIndex);

        myKey = Guid.NewGuid();
        ReInitializeDragging = true;
        StateHasChanged();
    }

    public record GridDataItem(string Name);
}